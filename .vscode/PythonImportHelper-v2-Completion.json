[
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "employee",
        "kind": 6,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "class employee(BaseModel):\n    id:UUID = Field(default_factory=uuid4)  # Auto-generate UUID\n    name:str\n    designation:str\nemployeeList = [\n    employee(name=\"Alice\", designation=\"Developer\"),\n    employee(name=\"Bob\", designation=\"Designation\"),\n]\napp =FastAPI()\norigins=[",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "get_employees",
        "kind": 2,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "def get_employees():\n    return  {\"Hello , world\"}\n@app.get(\"/employees\",response_model=list[employee])\ndef get_employees():\n    return  employeeList\n@app.post(\"/employee\", response_model=employee)\ndef add_employee(employee:employee):\n    employeeList.append(employee)\n    return employee\n@app.put(\"/edit_employee\", response_model=employee)",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "get_employees",
        "kind": 2,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "def get_employees():\n    return  employeeList\n@app.post(\"/employee\", response_model=employee)\ndef add_employee(employee:employee):\n    employeeList.append(employee)\n    return employee\n@app.put(\"/edit_employee\", response_model=employee)\ndef update_employee(employee:employee):\n    find =find_empoyee_by_id(employee.id)\n    if find:",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "add_employee",
        "kind": 2,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "def add_employee(employee:employee):\n    employeeList.append(employee)\n    return employee\n@app.put(\"/edit_employee\", response_model=employee)\ndef update_employee(employee:employee):\n    find =find_empoyee_by_id(employee.id)\n    if find:\n        print(employee)\n        for index,emp in enumerate(employeeList):\n            if emp.id==employee.id:",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "update_employee",
        "kind": 2,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "def update_employee(employee:employee):\n    find =find_empoyee_by_id(employee.id)\n    if find:\n        print(employee)\n        for index,emp in enumerate(employeeList):\n            if emp.id==employee.id:\n                emp.name=employee.name\n                emp.designation=employee.designation\n                employeeList[index]=employee\n                print(employeeList)",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "delete_employee",
        "kind": 2,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "def delete_employee(id:UUID):\n    findEmp= find_empoyee_by_id(id)\n    if findEmp:\n        employeeList.remove(findEmp)\n        return findEmp\n    else:\n        raise HTTPException(status_code=404, detail=\"Employee not found\") \ndef find_empoyee_by_id(id:UUID):\n        employee= next((emp for emp in employeeList if emp.id == id), None)\n        return employee",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "find_empoyee_by_id",
        "kind": 2,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "def find_empoyee_by_id(id:UUID):\n        employee= next((emp for emp in employeeList if emp.id == id), None)\n        return employee\nif __name__==\"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "employeeList",
        "kind": 5,
        "importPath": "backEnd.main",
        "description": "backEnd.main",
        "peekOfCode": "employeeList = [\n    employee(name=\"Alice\", designation=\"Developer\"),\n    employee(name=\"Bob\", designation=\"Designation\"),\n]\napp =FastAPI()\norigins=[\n    \"http://localhost:5173\"\n]\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "backEnd.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]